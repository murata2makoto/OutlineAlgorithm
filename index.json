[{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop.html","title":"OutlineAlgorithm.Interop","content":"InteropFSharp \nInteropCSharp \nInteropTree\u003C\u0027a\u003E","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopfsharp.html","title":"InteropFSharp","content":"InteropFSharp \n F#-friendly API using curried functions and idiomatic constructs. \nInteropFSharp.depthFirstTraversal \ndepthFirstTraversal \nInteropFSharp.breadthFirstTraversal \nbreadthFirstTraversal \nInteropFSharp.traverseWithOutlineIndex \ntraverseWithOutlineIndex \nInteropFSharp.CreateTree \nCreateTree","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopfsharp.html#depthFirstTraversal","title":"InteropFSharp.depthFirstTraversal","content":"InteropFSharp.depthFirstTraversal \ndepthFirstTraversal \n\n Performs depth-first traversal of an InteropTree. Only nodes with values are visited.  Dummy nodes are not visited.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopfsharp.html#breadthFirstTraversal","title":"InteropFSharp.breadthFirstTraversal","content":"InteropFSharp.breadthFirstTraversal \nbreadthFirstTraversal \n\n Performs breadth-first traversal of an InteropTree. Only nodes with values are visited.  Dummy nodes are not visited.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopfsharp.html#traverseWithOutlineIndex","title":"InteropFSharp.traverseWithOutlineIndex","content":"InteropFSharp.traverseWithOutlineIndex \ntraverseWithOutlineIndex \n\n Traverses the tree and applies the function to each node with a value, passing its outline index.  Dummy nodes are not visited.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopfsharp.html#CreateTree","title":"InteropFSharp.CreateTree","content":"InteropFSharp.CreateTree \nCreateTree \n\n Converts a sequence of elements and rank function into an InteropTree structure.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopcsharp.html","title":"InteropCSharp","content":"InteropCSharp \n C#-friendly API using .NET delegate types and standard collections. \nInteropCSharp.BreadthFirstTraversal \nBreadthFirstTraversal \nInteropCSharp.CreateTree \nCreateTree \nInteropCSharp.DepthFirstTraversal \nDepthFirstTraversal \nInteropCSharp.TraverseWithOutlineIndex \nTraverseWithOutlineIndex","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopcsharp.html#BreadthFirstTraversal","title":"InteropCSharp.BreadthFirstTraversal","content":"InteropCSharp.BreadthFirstTraversal \nBreadthFirstTraversal \n\n Performs breadth-first traversal using Action delegates.\n Only nodes with values are visited.  Dummy nodes are not visited.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopcsharp.html#CreateTree","title":"InteropCSharp.CreateTree","content":"InteropCSharp.CreateTree \nCreateTree \n\n Converts a sequence of elements and rank function into an InteropTree structure.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopcsharp.html#DepthFirstTraversal","title":"InteropCSharp.DepthFirstTraversal","content":"InteropCSharp.DepthFirstTraversal \nDepthFirstTraversal \n\n Performs depth-first traversal using Action delegates.\n Only nodes with values are visited.  Dummy nodes are not visited.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopcsharp.html#TraverseWithOutlineIndex","title":"InteropCSharp.TraverseWithOutlineIndex","content":"InteropCSharp.TraverseWithOutlineIndex \nTraverseWithOutlineIndex \n\n Traverses the tree and invokes the Action with outline index for each node with a value.  Dummy nodes are not visited.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interoptree-1.html","title":"InteropTree\u003C\u0027a\u003E","content":"InteropTree\u003C\u0027a\u003E \n Simple tree structure used across F# and C# APIs. \nInteropTree\u003C\u0027a\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nInteropTree\u003C\u0027a\u003E.Children \nChildren \nInteropTree\u003C\u0027a\u003E.HasValue \nHasValue \nInteropTree\u003C\u0027a\u003E.ValueOrDefault \nValueOrDefault \nInteropTree\u003C\u0027a\u003E.Value \nValue","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interoptree-1.html#\u0060\u0060.ctor\u0060\u0060","title":"InteropTree\u003C\u0027a\u003E.\u0060\u0060.ctor\u0060\u0060","content":"InteropTree\u003C\u0027a\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interoptree-1.html#Children","title":"InteropTree\u003C\u0027a\u003E.Children","content":"InteropTree\u003C\u0027a\u003E.Children \nChildren \nGets the child nodes of this tree node.","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interoptree-1.html#HasValue","title":"InteropTree\u003C\u0027a\u003E.HasValue","content":"InteropTree\u003C\u0027a\u003E.HasValue \nHasValue \nIndicates whether this node has a value (i.e., is not None).","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interoptree-1.html#ValueOrDefault","title":"InteropTree\u003C\u0027a\u003E.ValueOrDefault","content":"InteropTree\u003C\u0027a\u003E.ValueOrDefault \nValueOrDefault \nGets the contained value if present, otherwise returns the default value of type \u0027a.","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interoptree-1.html#Value","title":"InteropTree\u003C\u0027a\u003E.Value","content":"InteropTree\u003C\u0027a\u003E.Value \nValue \nGets the optional value of this node.","headings":[],"type":"apiDocs"}]