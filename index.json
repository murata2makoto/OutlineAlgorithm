[{"uri":"/OutlineAlgorithm/reference/outlinealgorithm.html","title":"OutlineAlgorithm","content":"TokenOrParenthesis","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop.html","title":"OutlineAlgorithm.Interop","content":"InteropFSharp \nInteropCSharp \nInteropTree\u003C\u0027a\u003E","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-tokenorparenthesis.html","title":"TokenOrParenthesis","content":"TokenOrParenthesis \n \nTokenOrParenthesis.TokenOrParenthesis\u003C\u0027a\u003E \nTokenOrParenthesis\u003C\u0027a\u003E","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-tokenorparenthesis-tokenorparenthesis-1.html","title":"TokenOrParenthesis\u003C\u0027a\u003E","content":"TokenOrParenthesis\u003C\u0027a\u003E \n\n Represents a token or a parenthesis in a sequence, used for outlining or parsing operations.\n  \nTokenOrParenthesis\u003C\u0027a\u003E.IsStartParenthesis \nIsStartParenthesis \nTokenOrParenthesis\u003C\u0027a\u003E.IsDummyToken \nIsDummyToken \nTokenOrParenthesis\u003C\u0027a\u003E.IsToken \nIsToken \nTokenOrParenthesis\u003C\u0027a\u003E.IsEndParenthesis \nIsEndParenthesis \nTokenOrParenthesis\u003C\u0027a\u003E.Token \nToken \nTokenOrParenthesis\u003C\u0027a\u003E.DummyToken \nDummyToken \nTokenOrParenthesis\u003C\u0027a\u003E.StartParenthesis \nStartParenthesis \nTokenOrParenthesis\u003C\u0027a\u003E.EndParenthesis \nEndParenthesis","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-tokenorparenthesis-tokenorparenthesis-1.html#IsStartParenthesis","title":"TokenOrParenthesis\u003C\u0027a\u003E.IsStartParenthesis","content":"TokenOrParenthesis\u003C\u0027a\u003E.IsStartParenthesis \nIsStartParenthesis \n","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-tokenorparenthesis-tokenorparenthesis-1.html#IsDummyToken","title":"TokenOrParenthesis\u003C\u0027a\u003E.IsDummyToken","content":"TokenOrParenthesis\u003C\u0027a\u003E.IsDummyToken \nIsDummyToken \n","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-tokenorparenthesis-tokenorparenthesis-1.html#IsToken","title":"TokenOrParenthesis\u003C\u0027a\u003E.IsToken","content":"TokenOrParenthesis\u003C\u0027a\u003E.IsToken \nIsToken \n","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-tokenorparenthesis-tokenorparenthesis-1.html#IsEndParenthesis","title":"TokenOrParenthesis\u003C\u0027a\u003E.IsEndParenthesis","content":"TokenOrParenthesis\u003C\u0027a\u003E.IsEndParenthesis \nIsEndParenthesis \n","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-tokenorparenthesis-tokenorparenthesis-1.html#Token","title":"TokenOrParenthesis\u003C\u0027a\u003E.Token","content":"TokenOrParenthesis\u003C\u0027a\u003E.Token \nToken \n\n Represents a token with a specific value.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-tokenorparenthesis-tokenorparenthesis-1.html#DummyToken","title":"TokenOrParenthesis\u003C\u0027a\u003E.DummyToken","content":"TokenOrParenthesis\u003C\u0027a\u003E.DummyToken \nDummyToken \n Represents a placeholder token with no value.","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-tokenorparenthesis-tokenorparenthesis-1.html#StartParenthesis","title":"TokenOrParenthesis\u003C\u0027a\u003E.StartParenthesis","content":"TokenOrParenthesis\u003C\u0027a\u003E.StartParenthesis \nStartParenthesis \n Represents the start of a parenthesis.","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-tokenorparenthesis-tokenorparenthesis-1.html#EndParenthesis","title":"TokenOrParenthesis\u003C\u0027a\u003E.EndParenthesis","content":"TokenOrParenthesis\u003C\u0027a\u003E.EndParenthesis \nEndParenthesis \n Represents the end of a parenthesis.","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopfsharp.html","title":"InteropFSharp","content":"InteropFSharp \n F#-friendly API using curried functions and idiomatic constructs. \nInteropFSharp.depthFirstTraversal \ndepthFirstTraversal \nInteropFSharp.breadthFirstTraversal \nbreadthFirstTraversal \nInteropFSharp.traverseWithOutlineIndex \ntraverseWithOutlineIndex \nInteropFSharp.createTokenOrParenthesisSeq \ncreateTokenOrParenthesisSeq \nInteropFSharp.parseToTree \nparseToTree","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopfsharp.html#depthFirstTraversal","title":"InteropFSharp.depthFirstTraversal","content":"InteropFSharp.depthFirstTraversal \ndepthFirstTraversal \n\n Performs depth-first traversal of an InteropTree. Only nodes with values are visited.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopfsharp.html#breadthFirstTraversal","title":"InteropFSharp.breadthFirstTraversal","content":"InteropFSharp.breadthFirstTraversal \nbreadthFirstTraversal \n\n Performs breadth-first traversal of an InteropTree. Only nodes with values are visited.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopfsharp.html#traverseWithOutlineIndex","title":"InteropFSharp.traverseWithOutlineIndex","content":"InteropFSharp.traverseWithOutlineIndex \ntraverseWithOutlineIndex \n\n Traverses the tree and applies the function to each node with a value, passing its outline index.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopfsharp.html#createTokenOrParenthesisSeq","title":"InteropFSharp.createTokenOrParenthesisSeq","content":"InteropFSharp.createTokenOrParenthesisSeq \ncreateTokenOrParenthesisSeq \n\n Converts a sequence of elements into a token stream using a rank function.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopfsharp.html#parseToTree","title":"InteropFSharp.parseToTree","content":"InteropFSharp.parseToTree \nparseToTree \n\n Parses a token sequence into an InteropTree.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopcsharp.html","title":"InteropCSharp","content":"InteropCSharp \n C#-friendly API using .NET delegate types and standard collections. \nInteropCSharp.BreadthFirstTraversal \nBreadthFirstTraversal \nInteropCSharp.CreateTokenOrParenthesisSeq \nCreateTokenOrParenthesisSeq \nInteropCSharp.DepthFirstTraversal \nDepthFirstTraversal \nInteropCSharp.ParseToTree \nParseToTree \nInteropCSharp.TraverseWithOutlineIndex \nTraverseWithOutlineIndex","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopcsharp.html#BreadthFirstTraversal","title":"InteropCSharp.BreadthFirstTraversal","content":"InteropCSharp.BreadthFirstTraversal \nBreadthFirstTraversal \n\n Performs breadth-first traversal using Action delegates.\n Only nodes with values are visited.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopcsharp.html#CreateTokenOrParenthesisSeq","title":"InteropCSharp.CreateTokenOrParenthesisSeq","content":"InteropCSharp.CreateTokenOrParenthesisSeq \nCreateTokenOrParenthesisSeq \n\n Converts a sequence of elements and rank function into a flat array of tokens and parentheses.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopcsharp.html#DepthFirstTraversal","title":"InteropCSharp.DepthFirstTraversal","content":"InteropCSharp.DepthFirstTraversal \nDepthFirstTraversal \n\n Performs depth-first traversal using Action delegates.\n Only nodes with values are visited.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopcsharp.html#ParseToTree","title":"InteropCSharp.ParseToTree","content":"InteropCSharp.ParseToTree \nParseToTree \n\n Parses a sequence of TokenOrParenthesis elements into an InteropTree structure.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interopcsharp.html#TraverseWithOutlineIndex","title":"InteropCSharp.TraverseWithOutlineIndex","content":"InteropCSharp.TraverseWithOutlineIndex \nTraverseWithOutlineIndex \n\n Traverses the tree and invokes the Action with outline index for each node with a value.\n ","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interoptree-1.html","title":"InteropTree\u003C\u0027a\u003E","content":"InteropTree\u003C\u0027a\u003E \n Simple tree structure used across F# and C# APIs. \nInteropTree\u003C\u0027a\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nInteropTree\u003C\u0027a\u003E.Children \nChildren \nInteropTree\u003C\u0027a\u003E.Value \nValue \nInteropTree\u003C\u0027a\u003E.HasValue \nHasValue \nInteropTree\u003C\u0027a\u003E.ValueOrDefault \nValueOrDefault","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interoptree-1.html#\u0060\u0060.ctor\u0060\u0060","title":"InteropTree\u003C\u0027a\u003E.\u0060\u0060.ctor\u0060\u0060","content":"InteropTree\u003C\u0027a\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interoptree-1.html#Children","title":"InteropTree\u003C\u0027a\u003E.Children","content":"InteropTree\u003C\u0027a\u003E.Children \nChildren \nGets the child nodes of this tree node.","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interoptree-1.html#Value","title":"InteropTree\u003C\u0027a\u003E.Value","content":"InteropTree\u003C\u0027a\u003E.Value \nValue \nGets the optional value of this node.","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interoptree-1.html#HasValue","title":"InteropTree\u003C\u0027a\u003E.HasValue","content":"InteropTree\u003C\u0027a\u003E.HasValue \nHasValue \nIndicates whether this node has a value (i.e., is not None).","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/reference/outlinealgorithm-interop-interoptree-1.html#ValueOrDefault","title":"InteropTree\u003C\u0027a\u003E.ValueOrDefault","content":"InteropTree\u003C\u0027a\u003E.ValueOrDefault \nValueOrDefault \nGets the contained value if present, otherwise returns the default value of type \u0027a.","headings":[],"type":"apiDocs"},{"uri":"/OutlineAlgorithm/index.html","title":"OutlineAlgorithm\r\n","content":"OutlineAlgorithm\r\nOutlineAlgorithm is a library for converting a flat sequence of headings (e.g., h1, h2, h3) - each with an explicit nesting level - into a structured hierarchical tree. It is designed for use with both F# and C#, ensuring compatibility across .NET languages.\r\nThe conversion process consists of two main stages:\r\n\r\n\r\nToken and Parenthesis Generation\r\nThe input sequence is first transformed into a linear representation using tokens and parentheses that encode the nesting structure.\r\nImplemented by: CreateTokenOrParenthesisSeq in InteropCSharp or InteropFSharp.\r\n\r\n\r\nTree Construction\r\nThis token sequence is then parsed to construct a tree that reflects the document\u2019s logical outline.\r\nImplemented by: ParseToTree in InteropCSharp or InteropFSharp.\r\n\r\n\r\nOutlineAlgorithm is useful for tasks such as outline parsing, document structure analysis, and hierarchical data visualization.\r\n","headings":["OutlineAlgorithm"],"type":"content"}]